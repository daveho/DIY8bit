
  // command bytes (stored in active_cmd)
  parameter CMD_NONE        = 8'b00000000;
  parameter CMD_LOAD_FONT   = 8'b10000000; // the next 4906 bytes are font data
  parameter CMD_LOAD_CHDATA = 8'b10000010; // the next 512 bytes are character data

  // states receiving and processing bytes (stored in cmdproc_state)
  parameter CMDPROC_READY             = 3'd0; // ready to receive another data byte from command FIFO
  parameter CMDPROC_PROCESS           = 3'd1; // process data byte for current command
  parameter CMDPROC_FONT_STORE_BEGIN  = 3'd2; // begin storing word in font load buffer
  parameter CMDPROC_FONT_STORE_END    = 3'd3; // end storing word in font load buffer
  parameter CMDPROC_FONT_STORE_FINISH = 3'd4; // finish storing data in font buffer
  parameter CMDPROC_CHDATA_END        = 3'd5; // end processing of received character data

  reg [7:0] cmd_input_val; // most recent byte of input data from FIFO
  reg [7:0] active_cmd;    // what the active command is

  reg [2:0] cmdproc_state;

  reg [11:0] data_addr;

  // font bytes are received in pairs
  reg [7:0] font_word_byte1;
  reg [7:0] font_word_byte2;

  reg [2:0] font_load_nchunks;

  always @(posedge clk)
    begin
      if (nrst == RESET_ASSERTED)
        begin
          cmdproc_state <= CMDPROC_READY;
          cmd_input_val <= 8'd0;
          active_cmd <= CMD_NONE;
          data_addr <= 12'd0;

/*
          font_data_wr_addr <= 12'd0;
          font_data_wr <= 1'b0;
          font_data_wr_data <= 8'd0;
*/

          ch_data_wr_addr <= 9'd0;
          ch_data_wr <= 1'b0;
          ch_data_wr_data <= 8'd0;

          font_load_nchunks <= 3'd0;

          debug_led[0] <= 1'b0;
          debug_led[1] <= 1'b0;
          debug_led[2] <= 1'b0;
        end
      else
        begin
          case (cmdproc_state)

            CMDPROC_READY:
              if (cmdreg_data_avail == 1'b1)
                begin
                  // signal to the shared reg that we're
                  // reading the data (the data should already be available
                  // in the receive register)
                  cmdreg_rd <= 1'b1;
                  cmdproc_state <= CMDPROC_PROCESS;
                  cmd_input_val <= cmdreg_data_recv;
                end

             CMDPROC_PROCESS:
               begin
                 cmdreg_rd <= 1'b0; // finish read

                 // process the byte, based on which command is currently active (if any)
                 case (active_cmd)
                   CMD_NONE:
                     begin
                       // if the input value was a valid command, make
                       // it the active command, otherwise ignore it
                       if (cmd_input_val == CMD_LOAD_FONT ||
                           cmd_input_val == CMD_LOAD_CHDATA)
                         begin
                           // Valid command, so enter sub-state machine for that command
                           active_cmd <= cmd_input_val;
                           //debug_led[0] <= 1'b0;
                           //debug_led[1] <= 1'b0;
                           //debug_led[2] <= 1'b1;
                           data_addr <= 12'd0;
                         end
                       else
                         begin
                           // Invalid command, ignore
                           active_cmd <= CMD_NONE;
                           debug_led[0] <= 1'b1;
                           //debug_led[1] <= 1'b0;
                         end

                       // ready to get another byte from FIFO
                       cmdproc_state <= CMDPROC_READY;
                     end

                   CMD_LOAD_FONT:
                     begin
                       debug_led[1] <= 1'b1;

                       if (data_addr[0] == 1'b0)
                         font_word_byte1 <= cmd_input_val;
                       else
                         begin
                           font_word_byte2 <= cmd_input_val;
                           // now that the second byte of the font word
                           // has been received, we can put the word in the
                           // font load buffer
                           cmdproc_state <= CMDPROC_FONT_STORE_BEGIN;
                         end

                       data_addr <= data_addr + 1;
/*
                       // put the byte in the next location in the font data memory
                       font_data_wr_addr <= data_addr;
                       font_data_wr_data <= cmd_input_val;
                       font_data_wr <= 1'b1;

                       // advance to next address in the font data memory
                       data_addr <= data_addr + 1;

                       // write will finish on next clock cycle
                       cmdproc_state <= CMDPROC_END_FONT_WR;

                       // check whether all font data has been loaded,
                       // if so, we can continue processing other commands
                       if (data_addr == 12'd4095)
                         active_cmd <= CMD_NONE;
*/
                     end

                   CMD_LOAD_CHDATA:
                     begin
                       // put the byte in the next location in the character memory
                       ch_data_wr_addr <= data_addr[8:0];
                       ch_data_wr_data <= cmd_input_val;
                       ch_data_wr <= 1'b1;

                       // advance to next address in the character data memory
                       data_addr <= data_addr + 1;

                       // write will finish on next clock cycle
                       cmdproc_state <= CMDPROC_CHDATA_END;

                       // check whether all character data has been loaded
                       if (data_addr[8:0] == 9'd511)
                         active_cmd <= CMD_NONE;
                     end

                 endcase

               end

             CMDPROC_FONT_STORE_BEGIN:
               begin
                 // Only write to the font load buffer if we're sure that the
                 // character generator is not reading from it! The character
                 // generator will only check the font buffer if it's *not* in
                 // the vertical visible region, so if we *are* in the vertical visible
                 // region but not on the last line, we should be completely safe.
                 if (vcount < V_VISIBLE_END - 1)
                   begin
                     debug_led[1] <= 1'b0;

                     // begin writing the word of font data into the font load buffer
                     fontbuf_wr <= 1'b1;
                     fontbuf_wr_addr <= data_addr[7:1];
                     fontbuf_wr_data <= {font_word_byte1, font_word_byte2};
                     cmdproc_state <= CMDPROC_FONT_STORE_END;
                   end
               end

             CMDPROC_FONT_STORE_END:
               begin
                 // finish writing font data word to font load buffer
                 fontbuf_wr <= 1'b0;

                 // ready to receive another byte from FIFO
                 cmdproc_state <= CMDPROC_READY;

                 // if we've received 512 bytes of font data, then we're
                 // done with the CMD_LOAD_FONT command; note that we need
                 // to let the character generator know that there is data
                 // in the font load buffer
                 if (data_addr == 12'd512)
                   begin
                     if (font_load_nchunks == 3'b111)
                       // this is the 8th chunk of 512 bytes, meaning a complete
                       // font will in theory have been received when all of the
                       // data in this chunk arrives and is loaded into SPRAM
                       // by the character generator
                       debug_led[2] <= 1'b1;

                     // let the character generator know that there is font
                     // data available
                     fontbuf_count_wr1 <= 1'b1;
                     fontbuf_count_wrdata1 <= 9'd256;

                     debug_led[1] <= 1'b1;

                     // we stil need one additional clock cycle to finish the
                     // write to the shared counter
                     cmdproc_state <= CMDPROC_FONT_STORE_FINISH;
                   end
               end

             CMDPROC_FONT_STORE_FINISH:
               begin
                 // finish write to share counter
                 fontbuf_count_wr1 <= 1'b0;

                 // done with the CMD_LOAD_FONT command; can now process the
                 // next command
                 active_cmd <= CMD_NONE;
                 cmdproc_state <= CMDPROC_READY;

                 font_load_nchunks <= font_load_nchunks + 1;
               end


             CMDPROC_CHDATA_END:
               begin
                 // finsh writing byte of character data
                 ch_data_wr <= 1'b0;

                 // ready to get another byte from FIFO
                 cmdproc_state <= CMDPROC_READY;
               end

          endcase
        end
    end
